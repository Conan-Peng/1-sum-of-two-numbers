class Solution {
public:
    bool canPartition(vector<int>& nums) {
        //把数组总和取一半，看数组中是否存在加和恰好等于该值的情况，如果有就返回true
        //用动规数组存放bool值，dp[i][j]表示前i个元素恰好存在子集加和等于j的情况，它依赖于前i-1个元素的情况，因此有
        //状态转移方程：dp[i][j] = dp[i-1][j] | dp[i-1][j-nums[i-1]]
        int sum = 0;
        for (int num : nums) sum += num;
        if (sum%2) return false; //加和为奇一定不能等分两段
        sum = sum/2;
        vector<vector<bool> > dp(nums.size() + 1, vector<bool>(sum + 1, false));
        for (int i = 1; i < dp.size(); i++)
        {
            for (int j = 0; j < dp[i].size(); j++)
            {
                if (j == 0) 
                {
                    dp[i][j] = true;
                    continue;
                }
                if (j - nums[i-1] < 0) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i-1][j] | dp[i-1][j-nums[i-1]];
            }
        }
        return dp[nums.size()][sum];
    }
};
